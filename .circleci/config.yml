version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        description: workflow id
        type: string
       
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-backendstack-<<parameters.workflow_id>>
            aws cloudformation delete-stack --stack-name udapeople-frontendstack-<<parameters.workflow_id>>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
      
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl -H "token: 5fc5fdcc-f059-4b80-b1fb-3dd8976d0d3b" --request GET https://api.memstash.io/values/migrations-${CIRCLE_WORKFLOW_ID})
            echo $SUCCESS
            if($SUCCESS==1); 
            then
              cd ~/project/backend
              npm install
              npm migrations:revert
              exit 1
            fi
            
jobs:
  # build-frontend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [frontend-build]
  #     - run:
  #         name: Build front-end
  #         command: |
  #           cd frontend
  #           npm install 
  #           npm run build
           
  #     - save_cache:
  #         paths: [frontend/node_modules]
  #         key: frontend-build

  # build-backend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [backend-build]
  #     - run:
  #         name: Back-end build
  #         command: |
  #            cd backend
  #            npm install 
  #            npm run build
             
  #     - save_cache:
  #         paths: [backend/node_modules]
  #         key: backend-build

  # test-frontend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [frontend-build]
  #     - run:
  #         name: frontend test
  #         command: |
  #            cd frontend
  #            npm install
  #            npm run test
      
  # test-backend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [backend-build]
  #     - run:
  #         name: backend test
  #         command: |
  #           cd backend
  #           npm install
  #           npm run test
            
  # scan-frontend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [frontend-build]
  #     - run:
  #         name: frontend scan
  #         command: |
  #           cd frontend
  #           npm install
  #           npm audit fix

  # scan-backend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [backend-build]
  #     - run:
  #         name: backend scan
  #         command: |
  #           cd backend
  #           npm install
  #           npm audit fix

  # deploy-infrastructure:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run:
  #         name: Ensure back-end infrastructure exists
  #         command: |
  #           aws cloudformation deploy \
  #             --template-file .circleci/files/backend.yml \
  #             --tags project=udapeople, Name=Backend \
  #             --stack-name "udapeople-backendstack-${CIRCLE_WORKFLOW_ID}" \
  #             --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"        
  #     - run: 
  #         name: Add back-end IP to memstash
  #         command: |
  #           Backend_IP=$(aws ec2 describe-instances \
  #             --query 'Reservations[*].Instances[*].PublicIpAddress' \
  #             --output text)
  #           echo $Backend_IP
  #           if [ -z "$Backend_IP"]
  #           then 
  #             echo "No host ip found"
  #           else
  #            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" --request PUT --data "$Backend_IP" https://api.memstash.io/values/Backend_IP
  #           fi
  #     - run:
  #         name: Ensure front-end infrastructure exist
  #         command: |
  #           aws cloudformation deploy \
  #             --template-file .circleci/files/frontend.yml \
  #             --tags project=udapeople, Name=Frontend \
  #             --stack-name "udapeople-frontendstack-${CIRCLE_WORKFLOW_ID}" \
  #             --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"  
     
  #     - run:
  #         name: Add back-end ip to ansible inventory
  #         command: |
  #           aws ec2 describe-instances \
  #             --query 'Reservations[*].Instances[*].PublicIpAddress' \
  #             --output text >> .circleci/ansible/inventory.txt
  #           cat .circleci/ansible/inventory.txt
  #     - run: 
  #         name: Install tar, gzip and curl
  #         command: |
  #           yum install -y tar
  #           yum install -y gzip
  #           yum install -y curl
  #     - persist_to_workspace:
  #         root: ~/
  #         paths:
  #           - project/.circleci/ansible/inventory.txt
  #     - destroy-environment:
  #         workflow_id: "${CIRCLE_WORKFLOW_ID}"
        
        
  # configure-infrastructure:
  #   docker:
  #     - image: python:3.7-alpine3.11
  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #         fingerprints: [ 'e5:aa:4c:3c:c8:3f:08:e3:c1:ff:d7:38:80:6f:16:07' ]
  #     - attach_workspace:
  #         at: ~/
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           apk add --update ansible
  #           pip install awscli
  #     - run:
  #         name: Configure server
  #         command: |
  #           ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      
  #     - destroy-environment:
  #         workflow_id: "${CIRCLE_WORKFLOW_ID}"

  # run-migrations:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout 
  #     - run:
  #         name: setup environment variables
  #         command: |
  #           echo ENVIRONMENT=development > backend/.env
  #           echo TYPEORM_CONNECTION=postgres >> backend/.env
  #           echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> backend/.env
  #           echo TYPEORM_HOST=$TYPEORM_HOST >> backend/.env
  #           echo TYPEORM_PORT=$TYPEORM_PORT >> backend/.env
  #           echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> backend/.env
  #           echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> backend/.env
  #           echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> backend/.env
  #           echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
  #           echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
  #           echo NODE_ENV=development >> "backend/.env"
  #     - run:
  #         name: Run migrations
  #         command: |
  #           cd backend
  #           cat .env
  #           npm install 
  #           npm run migrations > migrations-${CIRCLE_WORKFLOW_ID}.txt
  #           npm run build
  #     - run:
  #         name: Send migration results to memstash
  #         command: |
  #           cd backend
  #           if grep -q "has been executed successfully" migrations-${CIRCLE_WORKFLOW_ID}.txt
  #           then
  #             curl -H "Content-Type: text/plain" -H "token: 5fc5fdcc-f059-4b80-b1fb-3dd8976d0d3b" --request PUT --data "1" https://api.memstash.io/values/migrations-${CIRCLE_WORKFLOW_ID}
  #           else
  #             curl -H "Content-Type: text/plain" -H "token: 5fc5fdcc-f059-4b80-b1fb-3dd8976d0d3b" --request PUT --data "0" https://api.memstash.io/values/migrations-${CIRCLE_WORKFLOW_ID}
  #           fi
            
  #     - revert-migrations 

  # deploy-frontend:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           yum install gzip tar python3-pip curl -y
  #           curl -sL https://rpm.nodesource.com/setup_10.x | bash -
  #           yum install nodejs npm -y
  #           cd frontend
  #           npm install 

  #     - run:
  #         name: Get backend url and deploy front end
  #         command: |
  #           BACKEND_IP=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/Backend_IP)
  #           echo $BACKEND_IP
  #           export API_URL="http://${BACKEND_IP}:3030"
  #           echo "${API_URL}"
  #           echo API_URL=$API_URL > .env
  #           cd frontend
  #           npm run build
  #           aws s3 cp dist/ s3://udapeople-"${CIRCLE_WORKFLOW_ID}" --recursive
  #     - destroy-environment:
  #         workflow_id: "${CIRCLE_WORKFLOW_ID}"
  #     - revert-migrations
                    
  # deploy-backend:
  #   docker:
  #     - image: python:3.7-alpine3.11
  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #         fingerprints: [ 'e5:aa:4c:3c:c8:3f:08:e3:c1:ff:d7:38:80:6f:16:07' ]
  #     - attach_workspace:
  #         at: ~/
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           apk add --update ansible nodejs npm gzip curl tar
  #           pip install awscli
  #     - run:
  #         name: setup environment variables in production and zip backend files
  #         command: |
  #           echo ENVIRONMENT=production > backend/.env
  #           echo TYPEORM_CONNECTION=postgres >> backend/.env
  #           echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> backend/.env
  #           echo TYPEORM_HOST=$TYPEORM_HOST >> backend/.env
  #           echo TYPEORM_PORT=$TYPEORM_PORT >> backend/.env
  #           echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> backend/.env
  #           echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> backend/.env
  #           echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> backend/.env
  #           echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
  #           echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
  #           echo NODE_ENV=production >> "backend/.env"
  #           tar cvzf backend.tar.gz backend
  #     - run:
  #         name: Deploy backend
  #         command: |
  #           ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml
  #     - destroy-environment:
  #         workflow_id: "${CIRCLE_WORKFLOW_ID}"
  #     - revert-migrations

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      # - run:
      #     name: Install dependencies
      #     command: |
      #       apk add --update curl tar gzip python3 py3-pip
      #       pip3 install --upgrade pip
      #       pip3 install awscli
      # - run:
      #     name: Backend smoke test
      #     command: |
      #       BACKEND_IP=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/Backend_IP)
      #       curl http://${BACKEND_IP}:3030
      - run:
          name: Frontend smoke test.
          command: |
            if curl -s "http://udapeople-da36f675-0f51-4b5c-b421-c41bfb606589.s3-website-us-east-1.amazonaws.com/#/employees" | grep "Welcome"
            then 
              return 1
            else
              return 0
            fi
      # - destroy-environment:
      #     workflow_id: "${CIRCLE_WORKFLOW_ID}"
      # - revert-migrations

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y gzip tar
      - run:
          name: Update cloudfront distribution
          command: |
            #check old stacks 
            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 

            echo $OldWorkflowID
            echo $STACKS

            #Save on memstash
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" --request PUT --data "${OldWorkflowID}" https://api.memstash.io/values/OldWorkflowID
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" --request PUT --data "${STACKS}" https://api.memstash.io/values/STACKS

            #Deploy cloudfront
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name cloudfront-cdn \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides WorkflowID=${CIRCLE_WORKFLOW_ID} \
              --tags project=udapeople

  cleanup:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Get old stack workflow id
            command: |
              
              OldWorkflowID= $(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/OldWorkflowID)
              STACKS= $(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/STACKS)
              if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
              then        
                aws s3 rm s3://udapeople-${OldWorkflowID} --recursive
                aws cloudformation delete-stack --stack-name backend-${OldWorkflowID}
                aws cloudformation delete-stack --stack-name frontend-${OldWorkflowID}
              fi

        

workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      # - deploy-infrastructure:
      #     requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      - smoke-test
          # requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]